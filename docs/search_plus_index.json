{"./":{"url":"./","title":"Introduction","keywords":"","body":"前端项目示例 Vue示例 WeChat示例 "},"VueExamples/":{"url":"VueExamples/","title":"Vue示例","keywords":"","body":"Vue项目示例 初识 环境变量 部署到docker上 SignalR使用 SignalR带身份使用 Cookie 导航守卫样例-登录 axios请求 "},"VueExamples/1.initial/":{"url":"VueExamples/1.initial/","title":"初识","keywords":"","body":"1.初识 安装 # 全局卸载 npm uninstall vue-cli -g # 全局安装 npm install -g @vue/cli 创建项目 命令 vue create project-name 设置 工程启动 npm install 编译和热重装以进行开发 npm run serve 编译并最小化生产 npm run build 自定义配置 See Configuration Reference. "},"VueExamples/2.setting-environment-variables/":{"url":"VueExamples/2.setting-environment-variables/","title":"环境变量","keywords":"","body":"2.设置环境变量 官网文档 添加环境变量 新建 .env .env.development NODE_ENV=development VUE_APP_API_URL=http://localhost:5000/api/ .env.production NODE_ENV=production VUE_APP_API_URL=https://xxxxx.cn/api/ 使用 Home.vue 当前模式:{{env}} 当前webapi请求地址:{{VUE_APP_API_URL}} // ... export default { // ... data(){ return { env:process.env.NODE_ENV, VUE_APP_API_URL:process.env.VUE_APP_API_URL } }, } 切换 vue-cli-service serve --mode production 自定义端口 新建 vue.config.js module.exports = { devServer: { port: 5002 } } "},"VueExamples/3.deploy-to-docker/":{"url":"VueExamples/3.deploy-to-docker/","title":"部署到docker上","keywords":"","body":"3.部署到docker上 新建 default.conf server { listen 80; access_log /var/log/nginx/host.access.log; location / { root /usr/share/nginx/html; index index.html index.htm; try_files $uri $uri/ /index.html; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } Dockerfile FROM nginx:1.15 COPY dist/ /usr/share/nginx/html/ ADD default.conf /etc/nginx/conf.d/ WORKDIR /usr/share/nginx/html RUN chmod -R a+rx * docker-compose.yml version: \"2\" services: vue: build: context: . dockerfile: Dockerfile # 镜像名称 image: vue:1.0.0 ports: - 5000:80 restart: always # 容器名称 container_name: \"vue\" 构建命令 docker-compose up --force-recreate --build -d "},"VueExamples/4.signalr-client/":{"url":"VueExamples/4.signalr-client/","title":"SignalR使用","keywords":"","body":"SignalR https://www.npmjs.com/package/@aspnet/signalr 简要概述 安装依赖包 npm i @aspnet/signalr 新建utils文件夹 新建 chat.js const signalR = require(\"@aspnet/signalr\"); let conneciton = new signalR.HubConnectionBuilder() .withUrl(\"http://localhost:5000/chatHub\").build(); conneciton.on(\"ReceiveMessage\", (user, message) => { console.log(`${user}:${message}`); }) export default conneciton; 修改 Home.vue // ... import connection from \"../utils/chat\" export default { // ... created(){ connection.start().then(()=>{ connection.invoke(\"SendMessage\", \"允儿\", \"哈哈\"); }) } }; 运行 服务端 客户端 "},"VueExamples/5.signalr-client-jwt/":{"url":"VueExamples/5.signalr-client-jwt/","title":"SignalR带身份使用","keywords":"","body":"Signal R 带Token连接 依赖包 npm install axios npm i @aspnet/signalr 主要代码 chat.js const signalR = require(\"@aspnet/signalr\"); let config = { token:\"\" }; let conneciton = new signalR.HubConnectionBuilder() .withUrl(\"http://localhost:5000/chatHub\", { accessTokenFactory: () => config.token }).build(); conneciton.on(\"ReceiveMessage\", (user, message) => { console.log(`${user}:${message}`); }) export { conneciton, config }; Home.vue 摘要 //.. const axios = require(\"axios\").default; axios.defaults.baseURL = \"http://localhost:5000/api/\"; import { conneciton, config } from \"../utils/chat\"; export default { //... created() { axios .post(\"user/login\", { username: \"linyisonger\", password: \"123456\" }) .then(res => { console.log(res); if (res.data.token) { console.log(\"登录成功,开始连接\"); config.token = res.data.token; conneciton.start(); } }); } }; "},"VueExamples/6.cookie/":{"url":"VueExamples/6.cookie/","title":"Cookie","keywords":"","body":"cookie 主要代码 新建utils文件夹 新建helper.js /** * 获取cookie * @param {string} name cookie 名称 */ static getCookie(name) { name += \"=\"; let ca = document.cookie.split(';'); for (let i = 0; i 使用Home.vue import Helper from \"../utils/helper\" export default { // ... created(){ Helper.setCookie(\"username\",\"linyisonger\"); let username = Helper.getCookie(\"username\"); console.log(username); Helper.removeCookie(\"username\"); username = Helper.getCookie(\"username\"); console.log(username); } } "},"VueExamples/7.navigation-guards-sample/":{"url":"VueExamples/7.navigation-guards-sample/","title":"导航守卫样例-登录","keywords":"","body":"导航守卫样例-登录 主要代码 新建utils文件夹 新建helper.js /** * 获取cookie * @param {string} name cookie 名称 */ static getCookie(name) { name += \"=\"; let ca = document.cookie.split(';'); for (let i = 0; i 新建Login.vue页面 登录 import Helper from \"../utils/helper\"; export default { data() { return { allowSubmit: true, formData: { name: \"\", pass: \"\" } }; }, methods: { submitForm() { let name = this.formData.name; let pass = this.formData.pass; if (!name) alert(\"用户名不能为空\"); if (!pass) alert(\"密码不能为空\"); this.allowSubmit = false; // TODO 请求服务器 // 获取Token (这里用name+pass表示) Helper.setCookie(\"token\", name + pass); let redirectUrl = this.$route.query.redirectUrl; this.$router.push({ path: redirectUrl || \"/\" }); } } }; 设置导航守卫 router.js // 添加登陆路由 { path: \"/Login\", name: \"Login\", component: () => import('../views/Login.vue') } // 判断需不需要Login router.beforeEach((to, from, next) => { let token = Helper.getCookie(\"token\"); if (to.name === 'Login') { next(); } else if (token) { next(); } else { next({ path: '/Login', query: { redirectUrl: to.fullPath } }); } }); "},"VueExamples/8.axios/":{"url":"VueExamples/8.axios/","title":"axios请求","keywords":"","body":"8.axios 安装依赖 npm install --save axios webapi.js const axios = require(\"axios\").default; export default class WebApi { static request() { axios.defaults.baseURL = \"http://localhost:5000/\"; let headers = { \"Content-Type\": \"application/json\" }; // let token = Helper.getCookie(\"token\"); // if (token) // headers['Authorization'] = `bearer ${token}` axios.defaults.headers = headers; return axios; } static get() { return this.request().get('WeatherForecast'); } } Home.vue import WebApi from \"../utils/webapi\" //... created(){ WebApi.get().then((res)=>{ console.log(res.status); console.log(res.data) }) } "},"WeChatExamples/":{"url":"WeChatExamples/","title":"WeChat示例","keywords":"","body":"微信示例 文字超出省略号表示 时间格式化 "},"WeChatExamples/1.Text out of range ellipsis/":{"url":"WeChatExamples/1.Text out of range ellipsis/","title":"文字超出省略号表示","keywords":"","body":"文字超出范围省略号显示 效果预览 主要代码 index.wxss /* 单行省略号 */ .single-line { width: 600rpx; white-space: nowrap; /*强制不换行*/ overflow-x: hidden; /*超出文字自动隐藏 */ text-overflow: ellipsis; /*文字隐藏后添加省略号*/ } /* 多行省略号 */ .multi-line { width: 600rpx; display: -webkit-box; overflow: hidden; /*超出部分隐藏*/ text-overflow: ellipsis; word-wrap: break-word; /*全部换号*/ white-space: normal !important; /*强制换行*/ -webkit-line-clamp: 2; /*要显示行数*/ -webkit-box-orient: vertical; /*从上向下垂直排列子元素*/ } 关于text-ellipsis组件的主要代码 text-ellipsis.js Component({ externalClasses: [\"outside-style\"], }) text-ellipsis.wxml text-ellipsis.wxss /* 这里与前面一样 */ .multi-line { width: 600rpx; display: -webkit-box; overflow: hidden; /*超出部分隐藏*/ text-overflow: ellipsis; word-wrap: break-word; /*全部换号*/ white-space: normal !important; /*强制换行*/ -webkit-line-clamp: 2; /*要显示行数*/ -webkit-box-orient: vertical; /*从上向下垂直排列子元素*/ } 引用组件 index.json \"usingComponents\": { \"text-ellipsis\":\"/components/text-ellipsis/text-ellipsis\" } 使用 index.wxml [文字内容] index.wxss /* 使用外部class样式 */ .outside-style{ width: 400rpx !important; color: red; -webkit-line-clamp: 3 !important; font-size: 28rpx } "},"WeChatExamples/2.Format time/":{"url":"WeChatExamples/2.Format time/","title":"时间格式化","keywords":"","body":"时间格式化 预览效果 主要代码 tools.wxs var formatTime = function(date, format = \"\") { var y = date.substring(0, 4); // 年 var m = date.substring(5, 7); // 月 var d = date.substring(8, 10); // 天 var h = date.substring(11, 13); // 时 var _m = date.substring(14, 16);// 分 var s = date.substring(17, 19); // 秒 //获取有几个 y var yC = (format.split('y')).length - 1 //输出的年份 var rY = y.substring(y.length - yC, y.length); //创建yC长度的y字符串 来替换成rY长度的年份 format = format.replace(createStr(\"y\", yC), rY) .replace(\"MM\", m) // 月 .replace(\"dd\", d) // 天 .replace(\"HH\", h) // 时 .replace(\"mm\", _m)// 分 .replace(\"ss\", s) // 秒 return format; } var createStr = function (s, c) { var r = \"\"; for (var i = 0; i 使用 index.wxml --> {{tools.formatTime(time,\"MM.dd HH:mm\")}} --> "}}