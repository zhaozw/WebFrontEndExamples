{
  "code": "export default class UserControl extends Laya.Script {\r\n    constructor() {\r\n        super();\r\n    }\r\n    onAwake() {\r\n        this.user = this.owner;\r\n        this.rb = this.user.getComponent(Laya.Rigidbody3D);\r\n        this.model = this.user.getChildByName('Player');\r\n        this.ani = this.model.getComponent(Laya.Animator);\r\n        Laya.stage.on('MoveStatus', this, this.status);\r\n        Laya.stage.on('MoveUser', this, this.move);\r\n    }\r\n    status(isMove) {\r\n        console.log(\"isMove\", isMove);\r\n        this.rb.isKinematic = isMove;\r\n        if (isMove)\r\n            this.ani.crossFade('walk', .2);\r\n        else\r\n            this.ani.crossFade('idle', .2);\r\n    }\r\n    move(x, y, des) {\r\n        let anglur = Math.atan2(y, x) * 180 / Math.PI - 90;\r\n        let resultRotation = new Laya.Quaternion();\r\n        let currentRotation = this.model.transform.localRotation;\r\n        let targetRotation = this.fromEuler(new Laya.Vector3(this.model.transform.localRotationEulerX, anglur, this.model.transform.localRotationEulerZ));\r\n        if (des > .5)\r\n            this.ani.crossFade('run', .2);\r\n        if (des <= .5)\r\n            this.ani.crossFade('walk', .2);\r\n        console.log(des);\r\n        Laya.Quaternion.slerp(currentRotation, targetRotation, .2, resultRotation);\r\n        this.model.transform.localRotation = resultRotation;\r\n        let tempForward = new Laya.Vector3();\r\n        let modelRadian = this.model.transform.rotationEuler.y * Math.PI / 180;\r\n        let modelCos = Math.cos(modelRadian);\r\n        let modelSin = Math.sin(modelRadian);\r\n        console.log('模型的全局弧度', modelRadian);\r\n        console.log('余弦', modelCos);\r\n        console.log('正弦', modelSin);\r\n        let speed = .004;\r\n        tempForward.x = des * modelSin * speed;\r\n        tempForward.z = des * modelCos * speed;\r\n        console.log('移动向量', tempForward);\r\n        this.user.transform.translate(tempForward, true);\r\n    }\r\n    fromEuler(v3) {\r\n        let X = v3.x / 180 * Math.PI;\r\n        let Y = v3.y / 180 * Math.PI;\r\n        let Z = v3.z / 180 * Math.PI;\r\n        let x = Math.cos(Y / 2) * Math.sin(X / 2) * Math.cos(Z / 2) + Math.sin(Y / 2) * Math.cos(X / 2) * Math.sin(Z / 2);\r\n        let y = Math.sin(Y / 2) * Math.cos(X / 2) * Math.cos(Z / 2) - Math.cos(Y / 2) * Math.sin(X / 2) * Math.sin(Z / 2);\r\n        let z = Math.cos(Y / 2) * Math.cos(X / 2) * Math.sin(Z / 2) - Math.sin(Y / 2) * Math.sin(X / 2) * Math.cos(Z / 2);\r\n        let w = Math.cos(Y / 2) * Math.cos(X / 2) * Math.cos(Z / 2) + Math.sin(Y / 2) * Math.sin(X / 2) * Math.sin(Z / 2);\r\n        return new Laya.Quaternion(x, y, z, w);\r\n    }\r\n}\r\n",
  "references": []
}
